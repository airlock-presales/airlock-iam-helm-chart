{{- $fullName := include "airlock-iam.fullname" . -}}
{{- $the_name := $fullName -}}
{{- $databaseDeployment := include "airlock-iam.deploymentType" . -}}
{{- $databaseType := include "airlock-iam.databaseType" . -}}
{{- $hasShared := include "airlock-iam.hasShared" . -}}
{{- $hasSandbox := include "airlock-iam.hasSandbox" . -}}
{{- if eq $hasShared "true" -}}
{{-   $suffix := "" -}}
{{-   if eq $hasSandbox "true" -}}
{{-     $suffix = ternary .Values.iam.shared.suffix "shared" (ne .Values.iam.shared.suffix "") -}}
{{-   end -}}
{{-   if $suffix -}}
{{-     $the_name = print $fullName "-" $suffix -}}
{{-   end -}}
{{-   $instanceProp := deepCopy .Values.iam.instanceProperties.default -}}
{{-   $reference := .Values.iam.shared.instancePropertiesRef | default "default" -}}
{{-   if hasKey .Values.iam.instanceProperties $reference -}}
{{-     $instanceProp = mergeOverwrite $instanceProp (get .Values.iam.instanceProperties $reference) -}}
{{-   end -}}
{{-   $persistenceProp := deepCopy .Values.persistence.default -}}
{{-   $reference = .Values.iam.shared.persistenceRef | default "default" -}}
{{-   if hasKey .Values.persistence $reference -}}
{{-     $persistenceProp = mergeOverwrite $persistenceProp (get .Values.persistence $reference) -}}
{{-   end -}}
{{-   $healthCheckProp := deepCopy .Values.healthChecks.default -}}
{{-   $reference = .Values.iam.shared.healthChecksRef | default "default" -}}
{{-   if hasKey .Values.healthChecks $reference -}}
{{-     $healthCheckProp = mergeOverwrite $healthCheckProp (get .Values.healthChecks $reference) -}}
{{-   end -}}
{{-   $_ := set . "IAM_the_name" $the_name -}}
{{-   $_ := set . "IAM_suffix" $suffix -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $the_name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "airlock-iam.labels" $ | nindent 4 }}
  annotations:
    {{- include "airlock-iam.annotations" $ | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "airlock-iam.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "airlock-iam.labels" $ | nindent 8 }}
      annotations:
        {{- include "airlock-iam.annotations" $ | nindent 8 }}
    spec:
      serviceAccountName: {{ $fullName }}
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      {{- $pullSecrets := include "airlock-iam.listPullSecrets" . }}
      {{- if ne $pullSecrets "" }}
      imagePullSecrets:
        {{- range (regexSplit "," $pullSecrets -1) }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- if and (ne $databaseDeployment "none") (ne $databaseDeployment "") }}
      initContainers:
        - name: {{ print $the_name "-init" }}
          {{- if eq $databaseType "mariadb" }}
          image: "{{ .Values.images.mariadb.repository }}:{{ .Values.images.mariadb.tag }}"
          imagePullPolicy: {{ quote .Values.images.mariadb.pullPolicy }}
          {{- else if eq $databaseType "postgresql" }}
          image: "{{ .Values.images.postgresql.repository }}:{{ .Values.images.postgresql.tag }}"
          imagePullPolicy: {{ quote .Values.images.postgresql.pullPolicy }}
          {{- else if eq $databaseType "mysql" }}
          image: "{{ .Values.images.mysql.repository }}:{{ .Values.images.mysql.tag }}"
          imagePullPolicy: {{ quote .Values.images.mysql.pullPolicy }}
          {{- end }}
          args: ["/bin/bash", "/var/tmp/scripts/init_db"]
          #args: ["/bin/bash", "-c", "while true;do sleep 10;done"]
          env:
            - name: INSTANCE_DIR
              value: "/home/airlock/iam/instances"
            - name: INIT_TYPE
              value: {{ $databaseType | quote }}
            - name: INIT_INSTANCE
              value: {{ .Values.iam.instanceName }}
            - name: INIT_DL
              value: {{ .Values.database.initialisation.connector.download | quote }}
            - name: INIT_DL_VERSION
              value: {{ (ternary .Values.database.initialisation.connector.mariadb.version .Values.database.initialisation.connector.postgresql.version (eq $databaseType "mariadb")) | quote }}
            - name: INIT_DB_SCHEMA
              value: {{ ternary .Values.database.initialisation.schema.operation "none" (contains "adminapp" (include "airlock-iam.listModulesShared" .)) }}
            - name: INIT_DB_HOST
              {{- if eq $databaseDeployment "external" }}
              value: {{ .Values.database.external.host }}
              {{- else if eq $databaseDeployment "mariadb" }}
              value: {{ print $fullName "-mariadb" }}
              {{- else if eq $databaseDeployment "postgresql" }}
              value: {{ print $fullName "-postgresql" }}
              {{- end }}
            - name: INIT_DB_DATABASE
              {{- if eq $databaseDeployment "external" }}
              value: {{ .Values.database.external.database }}
              {{- else if eq $databaseDeployment "mariadb" }}
              value: {{ .Values.mariadb.auth.database }}
              {{- else if eq $databaseDeployment "postgresql" }}
              value: {{ .Values.postgresql.global.postgresql.auth.database }}
              {{- end }}
            - name: INIT_DB_USERNAME
              {{- if eq $databaseDeployment "external" }}
              {{-   if ne .Values.database.external.credentials.rootUser.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.credentials.rootUser.existingSecret }}
                  key: {{ .Values.database.external.credentials.rootUser.key }}
              {{-   else }}
              value: {{ .Values.database.external.credentials.rootUser.value }}
              {{-   end }}
              {{- else if eq $databaseDeployment "mariadb" }}
              value: {{ .Values.mariadb.auth.username }}
              {{- else if eq $databaseDeployment "postgresql" }}
              value: {{ .Values.postgresql.global.postgresql.auth.username }}
              {{- end }}
            - name: INIT_DB_PASSWORD
              {{- if eq $databaseDeployment "external" }}
              {{-   if ne .Values.database.external.credentials.rootPassword.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.credentials.rootPassword.existingSecret }}
                  key: {{ .Values.database.external.credentials.rootPassword.key }}
              {{-   else }}
              valueFrom:
                secretKeyRef:
                  name: {{ $the_name }}
                  key: {{ $.Values.database.external.credentials.rootPassword.key }}
              {{-   end }}
              {{- else if eq $databaseDeployment "mariadb" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mariadb.auth.existingSecret }}
                  key: "mariadb-password"
              {{- else if eq $databaseDeployment "postgresql" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey }}
              {{- end }}
            - name: INIT_DB_VERSION
              value: {{ .Values.images.iam.tag | quote }}
            - name: INIT_ADMIN_CREATE
              value: {{ ternary .Values.database.initialisation.administrator.create "false" (contains "adminapp" (include "airlock-iam.listModulesShared" .)) | quote }}
            - name: INIT_ADMIN_CHANGE
              value: {{ .Values.database.initialisation.administrator.enforceChange | quote }}
            - name: INIT_ADMIN_USERNAME
              {{- if ne .Values.database.initialisation.administrator.credentials.name.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.initialisation.administrator.credentials.name.existingSecret }}
                  key: {{ .Values.database.initialisation.administrator.credentials.name.key }}
              {{- else }}
              value: {{ .Values.database.initialisation.administrator.credentials.name.value }}
              {{- end }}
            - name: INIT_ADMIN_PWD_HASH
              {{- if ne .Values.database.initialisation.administrator.credentials.pwd_hash.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.initialisation.administrator.credentials.pwd_hash.existingSecret }}
                  key: {{ .Values.database.initialisation.administrator.credentials.pwd_hash.key }}
              {{- else }}
              #value: {{ .Values.database.initialisation.administrator.credentials.pwd_hash.value }}
              valueFrom:
                secretKeyRef:
                  name: {{ $the_name }}
                  key: {{ $.Values.database.initialisation.administrator.credentials.pwd_hash.key }}
              {{- end }}
          volumeMounts:
            {{- if $persistenceProp.config.enable }}
            - mountPath: /home/airlock/iam/instances
              name: config
            {{- end }}
            - mountPath: /var/tmp/scripts
              name: init
      {{- end }}
      containers:
        - name: {{ $the_name }}
          image: "{{ .Values.images.iam.repository }}:{{ .Values.images.iam.tag }}"
          imagePullPolicy: {{ quote .Values.images.iam.pullPolicy }}
          args: ["run", "-i", {{ quote .Values.iam.instanceName }}]
          env:
            {{- if .Values.iam.environmentId }}
            - name: IAM_ENVIRONMENT_ID
              value: {{ .Values.iam.environmentId }}
            {{- end }}
            - name: IAM_CONFIG_FORMAT
              value: {{ ternary "xml" "yaml" (eq (lower .Values.iam.configFormat) "xml") }}
            {{- if .Values.iam.apps.adminapp.path }}
            - name: IAM_ADMINAPP_URL_PATH
              value: {{ .Values.iam.apps.adminapp.path }}
            {{- end }}
            {{- if .Values.iam.apps.loginapp.path }}
            - name: IAM_LOGINAPP_URL_PATH
              value: {{ .Values.iam.apps.loginapp.path }}
            {{- end }}
            {{- if .Values.iam.apps.transactionApproval.path }}
            - name: IAM_TRANSACTION_APPROVAL_URL_PATH
              value: {{ .Values.iam.apps.transactionApproval.path }}
            {{- end }}
            {{- if .Values.iam.apps.serviceContainer.path }}
            - name: IAM_SERVICE_CONTAINER_URL_PATH
              value: {{ .Values.iam.apps.serviceContainer.path }}
            {{- end }}
            {{- if .Values.iam.apps.apiPolicyService.path }}
            - name: IAM_API_POLICY_SERVICE_URL_PATH
              value: {{ .Values.iam.apps.apiPolicyService.path }}
            {{- end }}
            - name: IAM_MODULES
              value: {{ include "airlock-iam.listModulesShared" . }}
            - name: IAM_WEB_SERVER_CONNECTORS
              value: "http,https"
            - name: IAM_WEB_SERVER_HTTP_PORT
              value: "8080"
            - name: IAM_WEB_SERVER_HTTPS_PORT
              value: "8443"
            {{- if eq $instanceProp.logging.level "" }}
            - name: IAM_LOG_LEVEL
              value: INFO
            {{- else if ne $instanceProp.logging.level "" }}
            - name: IAM_LOG_LEVEL
              value: {{ $instanceProp.logging.level }}
            {{- end }}
            {{- if $instanceProp.logging.local.enable }}
            {{-   if $instanceProp.logging.local.structured }}
            - name: IAM_LOG_STRUCTURED_FILE_ENABLED
              value: "true"
            - name: IAM_LOG_MAIN_ENABLED
              value: "false"
            {{-   else }}
            - name: IAM_LOG_STRUCTURED_FILE_ENABLED
              value: "false"
            - name: IAM_LOG_MAIN_ENABLED
              value: "true"
            {{-   end }}
            {{- end }}
            {{- if $instanceProp.logging.elasticsearchUrl }}
            - name: IAM_LOG_ELASTICSEARCH_URL
              value: {{ $instanceProp.logging.elasticsearchUrl }}
            {{- end }}
            {{- if $instanceProp.logging.webserver }}
            - name: IAM_WEB_SERVER_ACCESS_LOG_FILE_ENABLED
              value: "true"
            {{- end }}
            {{- if and (ne $databaseDeployment "none") (ne $databaseDeployment "") }}
            - name: IAM_CONFIG_EDITOR_SHOW_VARIABLES
              value: "true"
            - name: IAM_CFG_DB_DRIVER_CLASS
            {{-   if (eq $databaseType "mariadb") }}
              value: "org.mariadb.jdbc.Driver"
            {{-   else if (eq $databaseType "postgresql") }}
              value: "org.postgresql.Driver"
            {{-   else if (eq $databaseType "mysql") }}
              value: "com.mysql.cj.jdbc.Driver"
            {{-   else if (eq $databaseType "oracle") }}
              value: "oracle.jdbc.OracleDriver"
            {{-   else if (eq $databaseType "sqlserver") }}
              value: "com.microsoft.sqlserver.jdbc.SQLServerDriver"
            {{-   end }}
            - name: IAM_CFG_DB_URL
            {{-   if eq $databaseDeployment "external" }}
              value: {{ print "jdbc:" .Values.database.external.type "://" .Values.database.external.host "/" .Values.database.external.database }}
            {{-   else if eq $databaseDeployment "mariadb" }}
              value: {{ print "jdbc:mariadb://" $fullName "-mariadb/" .Values.mariadb.auth.database }}
            {{-   else if eq $databaseDeployment "postgresql" }}
              value: {{ print "jdbc:mariadb://" $fullName "-postgresql/" .Values.postgresql.global.postgresql.auth.database }}
            {{-   end }}
            - name: IAM_CFG_DB_USERNAME
            {{-   if eq $databaseDeployment "external" }}
              {{- if ne .Values.database.external.credentials.user.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.credentials.user.existingSecret }}
                  key: {{ .Values.database.external.credentials.user.key }}
              {{- else }}
              value: {{ .Values.database.external.credentials.user.value }}
              {{- end }}
            {{-   else if eq $databaseDeployment "mariadb" }}
              value: {{ .Values.mariadb.auth.username }}
            {{-   else if eq $databaseDeployment "postgresql" }}
              value: {{ .Values.postgresql.global.postgresql.auth.username }}
            {{-   end }}
            - name: IAM_CFG_DB_PASSWORD
            {{-   if eq $databaseDeployment "external" }}
              {{- if ne .Values.database.external.credentials.password.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.credentials.password.existingSecret }}
                  key: {{ .Values.database.external.credentials.password.key }}
              {{- else }}
              value: {{ .Values.database.external.credentials.password.value }}
              {{- end }}
            {{-   else if eq $databaseDeployment "mariadb" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mariadb.auth.existingSecret }}
                  key: "mariadb-password"
            {{-   else if eq $databaseDeployment "postgresql" }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey }}
            {{-   end }}
            {{- end }}
            {{- if $instanceProp.metrics }}
            - name: IAM_METRICS_PORT
              value: {{ quote $instanceProp.metrics }}
            {{- end }}
            - name: IAM_HEALTH_PORT
              value: "8081"
            - name: IAM_HEALTH_ADDRESS
              value: ".*"
            {{- range $name, $value := mergeOverwrite .Values.env $instanceProp.env .Values.iam.shared.env }}
            - name: {{ quote $name }}
              value: {{ quote $value }}
            {{- end }}
            - name: TZ
              value: {{ .Values.global.timezone }}
            - name: DEBUG
              value: {{ $databaseDeployment }}
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8081
              name: health
          {{- if $healthCheckProp.liveness.enable }}
          livenessProbe:
            periodSeconds: {{ $healthCheckProp.liveness.period }}
            timeoutSeconds: {{ $healthCheckProp.liveness.timeout }}
            failureThreshold: {{ $healthCheckProp.liveness.failures }}
            initialDelaySeconds: {{ $healthCheckProp.liveness.initialDelay }}
            httpGet:
              path: /health/live
              port: health
          {{- end }}
          {{- if $healthCheckProp.readiness.enable }}
          readinessProbe:
            periodSeconds: {{ $healthCheckProp.readiness.period }}
            timeoutSeconds: {{ $healthCheckProp.readiness.timeout }}
            failureThreshold: {{ $healthCheckProp.readiness.failures }}
            initialDelaySeconds: {{ $healthCheckProp.readiness.initialDelay }}
            httpGet:
              path: /health/ready
              port: health
          {{- end }}
          {{- if $healthCheckProp.startup.enable }}
          startupProbe:
            periodSeconds: {{ $healthCheckProp.startup.period }}
            timeoutSeconds: {{ $healthCheckProp.startup.timeout }}
            failureThreshold: {{ $healthCheckProp.startup.failures }}
            initialDelaySeconds: {{ $healthCheckProp.startup.initialDelay }}
            httpGet:
              path: /health/ready
              port: health
          {{- end }}
          resources:
            {{- if or (ne .Values.iam.shared.resources.requests.cpu "") (ne .Values.iam.shared.resources.requests.ram "") }}
            requests:
              {{- if or (ne .Values.iam.shared.resources.requests.cpu "") }}
              cpu: {{ .Values.iam.shared.resources.requests.cpu }}
              {{- end }}
              {{- if or (ne .Values.iam.shared.resources.requests.ram "") }}
              memory: {{ .Values.iam.shared.resources.requests.ram }}
              {{- end }}
            {{- end }}
            {{- if or (ne .Values.iam.shared.resources.limits.cpu "") (ne .Values.iam.shared.resources.limits.ram "") }}
            limits:
              {{- if or (ne .Values.iam.shared.resources.limits.cpu "") }}
              cpu: {{ .Values.iam.shared.resources.limits.cpu }}
              {{- end }}
              {{- if or (ne .Values.iam.shared.resources.limits.ram "") }}
              memory: {{ .Values.iam.shared.resources.limits.ram }}
              {{- end }}
            {{- end }}
    {{- if .Values.resourceOptions }}
          resources:
    {{ toYaml .Values.resourceOptions | indent 8 }}
    {{- end }}
          volumeMounts:
            {{- if $persistenceProp.config.enable }}
            - mountPath: /home/airlock/iam/instances
              name: config
            {{- end }}
            {{- if $persistenceProp.logs.enable }}
            - mountPath: {{ print "/home/airlock/iam/instances/" .Values.iam.instanceName "/logs" }}
              name: logs
            {{- end }}
            - mountPath: /home/airlock/iam/license.txt
              name: license
              subPath: license.txt
            - mountPath: /home/airlock/work
              name: work
      restartPolicy: {{ quote .Values.restartPolicy }}
      volumes:
        {{- if $persistenceProp.config.enable }}
        - name: config
          {{- if eq $persistenceProp.config.type "request" }}
          persistentVolumeClaim:
            claimName: {{ print $fullName "-" (ternary $persistenceProp.config.claim "config" (ne $persistenceProp.config.claim "")) }}
          {{- else if eq $persistenceProp.config.type "existing" }}
          persistentVolumeClaim:
            claimName: {{ $persistenceProp.config.claim }}
          {{- else if eq $persistenceProp.config.type "remote" }}
          {{ $persistenceProp.config.remote.type }}:
            server: {{ $persistenceProp.config.remote.server }}
            path: {{ $persistenceProp.config.remote.path }}
          {{- else if eq $persistenceProp.config.type "hostpath" }}
          hostPath:
            path: {{ $persistenceProp.config.hostPath }}
            type: Directory
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        {{- if $persistenceProp.logs.enable }}
        - name: logs
          {{- if eq $persistenceProp.logs.type "request" }}
          persistentVolumeClaim:
            claimName: {{ print $fullName "-" (ternary $persistenceProp.logs.claim "logs" (ne $persistenceProp.logs.claim "")) }}
          {{- else if eq $persistenceProp.logs.type "existing" }}
          persistentVolumeClaim:
            claimName: {{ $persistenceProp.logs.claim }}
          {{- else if eq $persistenceProp.logs.type "remote" }}
          {{ $persistenceProp.logs.remote.type }}:
            server: {{ $persistenceProp.logs.remote.server }}
            path: {{ $persistenceProp.logs.remote.path }}
          {{- else if eq $persistenceProp.logs.type "hostpath" }}
          hostPath:
            path: {{ $persistenceProp.logs.hostPath }}
            type: Directory
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        - name: license
          {{- if has (lower .Values.iam.license.type) (list "cm" "configmap") }}
          configMap:
            name: {{ .Values.iam.license.name }}
          {{- else }}
          secret:
            secretName: {{ .Values.iam.license.name }}
          {{- end }}
        {{- if and (ne $databaseDeployment "none") (ne $databaseDeployment "") }}
        - name: init
          configMap:
            name: {{ $the_name }}
        {{- end }}
        - name: work
          emptyDir: {}
{{- end -}}
