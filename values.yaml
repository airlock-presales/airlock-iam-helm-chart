# Airlock IAM - application setup
#
# Define how the deployment will look like, what applications are activated and how they behave.
# Knowledge of Airlock IAM terms and concepts is not absolutely required but probably very helpful.

iam:
  ## Name of the Airlock IAM configuration instance
  ## - default is 'auth'
  ## - needs to match the folder name of the instance on the config volume
  instanceName: "auth"

  ## Create instance if it does not yet exist
  ## - default is 'false'
  instanceCreate: false

  ## Format of the configuration file
  ## - valid values: yaml, xml
  ## - it is very strongly recommended to use the yaml format unless you have existing tooling
  ##   which modifies the file medusa-configuration.xml
  configFormat: "yaml"

  ## Active configuration environment
  ## - must match an environment identifier in the configuration file
  environmentId: ""

  ## License
  ## - Airlock IAM requires a valid license to run
  ## - Create secret: kubectl create secret generic <name> --from-file=license.txt=<filename>
  ## -  or configmap: kubectl create configmap <name> --from-file=license.txt=<filename>
  license:
    name: "airlock-iam-license"
    ## Kind of license object
    ## - valid values: cm, configmap, secret
    type: "cm"

  ## Deployment strategy for Airlock IAM apps (loginapp, adminapp, ...)
  ## - valid values: single, multi
  ## - single: combine all apps into a single pod with replicas=1
  ## - multi: separate every app into its own deployment for greater separation and control
  appDeploymentStrategy: "single"

  ## IAM web applications
  ## - for tests, all applications can be part of one deployment
  ## - for production and production-like test environments, it is recommended to split the applications
  ##   into separate deployments with individual settings, e.g. number of replicas
  apps:
    ## Loginapp
    ## - only the settings for the loginapp are documented in detail
    ## - the other applications provide the same properties
    loginapp:
      ## URL path to the loginapp
      ## - default is /<instanceName>-login
      path: ""

      ## Activation
      ## - activate only those applications which are required for your use case
      enable: true

      ## Settings for a "sandboxed" (individual) deployment of loginapp
      dedicatedDeployment:
        ## Naming suffix
        ## - allows to append a special tag to the name to differentiate from other deployments
        ## - by default, set to name of application, e.g. loginapp
        suffix: ""

        ## Number of replicas to schedule
        replicas: 1

        ## Each instance requires some settings to define its logging, Java options and other os-level integrations
        ## These settings are defined in their own section, under iam.instanceProperties (see further down).
        ## Each set of settings is combined under their own name (dict key) which can be referenced here.
        ## If name is not set here, iam.instanceProperties.default is used.
        instancePropertiesRef: ""

        ## Airlock IAM uses an instance directory from which it reads the configuration and other resources.
        ## Applications can share the same volume or use individual ones.
        ## Persistence settings are defined in their own section, under persistence (see further down).
        ## Each set of settings is combined under their own name (dict key) which can be referenced here.
        ## If name is not set here, persistence.default is used.
        persistenceRef: ""

        ## Health checks
        ## Settings are defined in their own section, under healthChecks (see further down).
        ## Each set of settings is combined under their own name (dict key) which can be referenced here.
        ## If name is not set here, healthChecks.default is used.
        healthChecksRef: ""

        ## CPU & memory resource limits and requests
        resources:
          requests:
            cpu: ""
            ram: ""
          limits:
            cpu: ""
            ram: ""

        ## Environment variables for loginapp
        ## - can be used to define settings for the instance.properties file by using the parameter name in all caps,
        ##   with punctuation such as "-" and "." replaced with "_". E.g. IAM_LOGINAPP_REST_UI_CUSTOMIZATIONS=instances/auth/designs/ui.zip
        ## - defined as a map, e.g. "varname: value"
        ## - these settings take precedence over environment variable settings for instanceProperties and global env
        env: {}
    adminapp:
      path: ""
      enable: true
      dedicatedDeployment:
        suffix: ""
        replicas: 1
        instancePropertiesRef: ""
        persistenceRef: ""
        healthChecksRef: ""
        resources:
          requests:
            cpu: ""
            ram: ""
          limits:
            cpu: ""
            ram: ""
        env: {}
    transactionApproval:
      path: ""
      enable: false
      dedicatedDeployment:
        suffix: ""
        replicas: 1
        instancePropertiesRef: ""
        persistenceRef: ""
        healthChecksRef: ""
        resources:
          requests:
            cpu: ""
            ram: ""
          limits:
            cpu: ""
            ram: ""
        env: {}
    serviceContainer:
      path: ""
      enable: false
      dedicatedDeployment:
        suffix: ""
        replicas: 1
        instancePropertiesRef: ""
        persistenceRef: ""
        healthChecksRef: ""
        resources:
          requests:
            cpu: ""
            ram: ""
          limits:
            cpu: ""
            ram: ""
        env: {}
    apiPolicyService:
      path: ""
      enable: false
      dedicatedDeployment:
        suffix: ""
        replicas: 1
        instancePropertiesRef: ""
        persistenceRef: ""
        healthChecksRef: ""
        resources:
          requests:
            cpu: ""
            ram: ""
          limits:
            cpu: ""
            ram: ""
        env: {}
  ## Settings for combined deployment of multiple applications
  ## - forced to replicas: 1
  combined:
    instancePropertiesRef: ""
    persistenceRef: ""
    healthChecksRef: ""

    ## CPU & memory resource limits and requests
    resources:
      requests:
        cpu: ""
        ram: ""
      limits:
        cpu: ""
        ram: ""

    ## Environment variables for combined deployment
    ## - can be used to define settings for the instance.properties file by using the parameter name in all caps,
    ##   with punctuation such as "-" and "." replaced with "_". E.g. IAM_LOGINAPP_REST_UI_CUSTOMIZATIONS=instances/auth/designs/ui.zip
    ## - defined as a map, e.g. "varname: value"
    ## - these settings take precedence over environment variable settings for instanceProperties and global env
    env: {}

  ## Map of instance properties settings
  ## - some commonly used instance.properties settings can be defined here directly
  ## - for others, use environment variables
  instanceProperties:
    ## Instance properties settings collection
    ## - key referenced by instancePropertiesRef in the application configuration, see e.g. iam.apps.loginapp.dedicatedDeployment
    ## - you should probably not overwrite the 'default' dict but create a custom dict
    ## - missing information in a custom dict is back-filled with settings from 'default'
    default:

      ## Define logging
      logging:
        ## Log level
        ## - valid values: TRACE, DEBUG, INFO, WARN, ERROR
        ## - default is INFO
        level: ""

        ## Local logging to files
        ## - same as for SCA (self-contained application, not container)
        ## - by default, disabled as logs are written to stdout
        local:
          ## Enable traditional, unstructed logging to (instance) local files
          ## - files are written to instance's logs/ directory
          enable: false

          ## Enable logging of structured log messages to files in "JSON Lines" format
          ## - files are written to instance's logs/ directory
          structured: true

        ## Send structured logs to Elasticsearch
        ## - define REST API URL of server, e.g. http://elasticsearch.example.com:9200/
        ## - if defined, local.structured (above) is forced to true
        ## - files are written to instance's logs/ directory and used as buffer
        elasticsearchUrl: ""

        ## Log webserver access logs to (instance) local files
        webserver: false

      ## Metrics endpoint port
      ## - if defined, metrics endpoint is exposed on this port
      metrics: ""

      ## JAVA_OPTS settings
      java:
        ## Override the default Java heapsize of 50% available RAM
        ## - must be specified as a percentage number, e.g. 60
        ## - does not support absolute values
        heapSize: ""

        ## Other java options
        opts:
          - key: ""
            value: ""

      ## Environment variables
      ## - can be used to define settings for the instance.properties file by using the parameter name in all caps,
      ##   with punctuation such as "-" and "." replaced with "_". E.g. IAM_LOGINAPP_REST_UI_CUSTOMIZATIONS=instances/auth/designs/ui.zip
      ## - defined as a map, e.g. "varname: value"
      ## - these settings take precedence over environment variable settings from global env
      env: {}

## Network service
## These settings will be used for each service for each deployment
## - Container and service ports are fixed - do not change them using environment variables
service:
  ## It is strongly recommended to not change the service type
  ## Communication to Airlock IAM should be routed over ingress and/or Airlock Microgateway
  type: "ClusterIP"

  ## 
  externalTrafficPolicy: false

  ## Service-specific annotations
  ## - sometimes required for DNS settings et al.
  annotations: { }

## Data communications ingress
## - make Airlock IAM accessible from the outside
ingress:
  ## Type of ingress
  ## - valid values: microgateway, gatewayAPI, ingress, httpproxy
  ## - microgateway: use Kubernetes Gateway API to route traffic through Airlock Microgateway, deploys security manifests
  ## - it is strongly recommended to use either microgateway or gatewayAPI
  type: "microgateway"

  ## Airlock Microgateway
  microgateway:
    ## Version of the Microgateway
    ## - selects correct protection templates
    ## - valid values depend on selected Airlock IAM version (images.iam.tag)
    version: "4.6"

  ## Kubernetes Gateway API
  ## - used for type: microgateway, gatewayAPI
  gatewayAPI:
    ## Which Gateway to use
    ## - must be defined !!!
    gateway: "airlock-gateway/airlock-gateway"

    ## Namespace of Gateway
    namespace: ""

  ## Ingress settings
  ## - used for type: ingress
  ingress:
    ## The Ingress API is provided by multiple implementations
    ## - select desired implementation using className
    className: ""

  ## Response timeout
  ## - specified as, e.g., "60s"
  ## - usually not needed
  timeout: ""

  ## 
  dns:
    ## FQDN to access Airlock IAM
    hostname: "iam-127-0-0-1.nip.io"

    ## dnsConfig option
    ndots: 2

  ## TLS settings
  tls:
    ## Secret containing TLS certificate
    secretName: ""

  ## Ingress-specific annotations
  ## - used to be required for older versions of Ingress API
  annotations: {}

## Airlock IAM features a MicroProfile-compliant endpoint for liveness, readiness and startup probes.
## Applications can share the same settings or use individual ones.
## Here, you set up different variants of health check configurations, referenced by the applications using healthChecksRef
healthChecks:
  default:
    liveness:
      enable: false
      period: 10
      timeout: 1
      failures: 3
      initialDelay: 5
    readiness:
      enable: false
      period: 5
      timeout: 1
      failures: 3
      initialDelay: 6
    startup:
      enable: false
      period: 2
      timeout: 1
      failures: 150
      initialDelay: 10

## Airlock IAM uses an instance directory from which it reads the configuration and other resources.
## Applications can share the same volume or use individual ones.
## Here, you set up different variants of persistence configurations, referenced by the applications using persistenceRef
persistence:
  ## Persistence properties settings collection
  ## - key referenced by persistenceRef in the application configuration, see e.g. iam.apps.loginapp.dedicatedDeployment
  ## - you should probably not overwrite the 'default' dict but create a custom dict
  ## - missing information in a custom dict is back-filled with settings from 'default'
  default:
    ## Volume for instance configuration
    config:
      ## Enable the config volume
      enable: true

      ## Volume type
      ## - request: a PersistentVolumeClaim manifest is created to request storage
      ## - existing: an existing PersistentVolumeClaim is used for storage
      ## - remote: storage from a remote server is mounted as volume
      ## - subpath: the storage refers to a (sub)path on an already existing volume
      ## - hostpath: the storage refers to a directory on the Kubernetes node
      type: "request"

      ## The storage class to use for the PVC
      ## - for type 'existing'
      storageClass: ""

      ## Volume access restrictions
      ## - valid values: ReadWriteOnce, ReadWriteMany, ReadWriteOncePod, ReadOnlyMany
      ## - for types 'request,existing,remote'
      accessMode: "ReadWriteMany"

      ## Name of existing PVC
      ## - for type 'existing'
      claim: ""

      ## Name of already existing volume and (sub)path to storage
      ## - for type 'volume'
      volumeName: ""
      subPath: ""

      ## Allocated size
      ## - for types 'request,existing,remote'
      size: "10M"

      ## Specify the mount
      ## - for type 'remote'
      remote:
        ## Network file system type
        ## - many possible values, e.g. nfs
        type: ""

        ## server and path of mount
        server: ""
        path: ""

      ## Hostpath mount
      ## - do not use unless you know what you are doing
      ## - only for test environments or local administration setups
      ## - never use for production or production-like test environments - you have been warned
      ## - on Rancher Desktop, use a value like "/mnt/c/Users/<user>/Documents/Airlock/IAM"
      hostPath: ""

    ## Volume for log files
    ## - by default, logs are written to stdout
    ## - historically, Airlock IAM has written its log to files - which may be preferred by some administrators
    ##   as they are used to the format
    ## - if enabled, log files are usually written to the instance directory
    ## - specify 'logs' volume to write logs somewhere else
    ## - properties are the same as documented for config (above), except where noted
    logs:
      enable: false
      type: "request"
      storageClass: ""
      accessMode: "ReadWriteOnce"

      ## With replicas > 1, StatefulSets are used instead of Deployments causing a PVC to be created per replica.
      ## The retention policy defines what to do when replicas are scaled down or the StatefulSet is deleted.
      ## - valid values: Delete, Retain
      ## - with Retain, manual cleanup is required
      ## - as volume contains only log data which should have been forwarded to Elasticsearch, anyway,
      ##   it should be quite safe to just remove
      replicaRetentionPolicy: "Delete"
      claim: ""
      volumeName: ""
      subPath: ""
      size: "100M"
      remote:
        type: ""
        server: ""
        path: ""
      hostPath: ""

## Authentication and self-service processes usually require multiple data exchanges between client and server.
## For security reasons, corresponding state information is not exposed to the client but retained on the server.
## To allow for Kubernetes scheduling, with pods started or terminated according to load, state must stored
## where it can be reloaded by any replica.
## For this, a Redis server is used.
## If replica is set to any number greater than 1, it is strongly recommended to enable Redis - and change
## the IAM configuration, accordingly.
redis:
  enable: false
  architecture: "replication"
  replica:
    replicaCount: 2
  sentinel:
    enabled: true

## Almost all functionality in Airlock IAM requires a database (users, groups, authentication devices etc.)
## The database used is defined in the configuration and not as part of the deployment.
## It is very common to make us of an existing database cluster, potentially operated outside of the Kubernetes cluster.
## For in-cluster database setups, this Helm chart relies on database operators.
## Consequently, it does not try to manage a full db setup but creates appropriate manifests:
## - PostgresSQL: https://cloudnative-pg.io
## - MariaDB: https://github.com/mariadb-operator/mariadb-operato
database:
  ## Configure the external database
  external:
    ## Activation
    ## - enable to use an external database
    ## - conflicts with database.mariadb.enable and database.postgresql.enable
    ## - only one of these may be set to true
    enable: false

    ## Database engine
    ## - the type of the  external database
    ## - valid values: mysql, mariadb, postgresql, mssql, oracle
    type: "mariadb"

    ## Database host
    ## - append port, if required, separated by colon, e.g. 'myhost:1234'
    host: "db.example.com"

    ## Database name
    database: "airlock_iam"

    ## Database access credentials
    ## - specify username & password to access database
    ## - preferably, use pre-existing secret
    ## - if secretName is defined, it is expected to contain the specified key
    credentials:
      ## The datrabase account (and its password) to access the Airlock IAM database
      user:
        ## Username to access database
        ## - ignored if existingSecret is set
        value: "airlock_iam"
  
        ## Name of existing secret containing username
        ## - overrides username setting
        existingSecret: ""
  
        ## Key for username in existing secret
        key: "db_user"
  
      password:
        ## Password to access database
        ## - ignored if existingSecret is set
        value: "a very hush and absolutely not well known secret"
  
        ## Name of existing secret containing password
        ## - overrides password setting
        existingSecret: ""
  
        ## Key for password in existing secret
        key: "db_password"
  
      ## A privileged datrabase account (and its password) authorized to create databases and define tables
      ## - only required if database.initialisation.schema.operation=init
      ## - properties are the same as documented for database.external.credentials.user & password (just above)
      rootUser:
        value: "root"
        existingSecret: ""
        key: "root_user"
      rootPassword:
        value: ""
        existingSecret: ""
        key: "root_password"
  
  ## Configure MariaDB deployed from this chart
  mariadb:
    ## Activation
    ## - enable to use an external database
    ## - conflicts with database.external.enable and database.postgresql.enable
    ## - only one of these may be set to true
    enable: false

    ## Rest of MariaDB configuration
    ## Unfortunately, Helm is pretty limited when it comes to passing values from a parent to a child chart
    ## Such values must be defined in the parent values.yaml (this file) under the key '<name-of-subchart>'
    ## In the case of MariaDB, look for a top-level key 'mariadb' towards the end of the file.
  
  ## Configure PostgreSQL deployed from this chart
  postgresql:
    ## Activation
    ## - enable to use an external database
    ## - conflicts with database.external.enable and database.mariadb.enable
    ## - only one of these may be set to true
    enable: false

    ## Rest of PostgreSQL configuration
    ## Unfortunately, Helm is pretty limited when it comes to passing values from a parent to a child chart
    ## Such values must be defined in the parent values.yaml (this file) under the key '<name-of-subchart>'
    ## In the case of PostgreSQL, look for a top-level key 'postgresql' towards the end of the file.
  
  ## Initialisation
  initialisation:
    ## Java database connector
    ## - Airlock IAM requires a Java database connector which is not part of the container image (for legal reasons)
    ## - can be provided as part of the instance directory (see 'persistence'), usually in directory <instanceName>/libs or common/libs
    ## - chart can launch a job which downloads connector to instance directory
    connector:
      ## Enable automatic download
      download: false
  
      ## Select relevant connector
      mariadb:
        ## Version of connector to download
        ## - needs to be specified
        version: "3.5.5"
  
        ## Package mirror to download from
        ## - default is 'MvA Internet Services GmbH, Zurich'
        mirrorHost: "https://mirror.mva-n.net"
  
      postgresql:
        ## Version of connector to download
        ## - needs to be specified
        version: "42.7.7"
  
        ## Package mirror to download from
        ## - default is 'MvA Internet Services GmbH, Zurich'
        mirrorHost: "https://jdbc.postgresql.org"

    ## Schema
    ## - create or upgrade database schema
    ## - uses the schema scripts as published on the documentation site, see https://docs.airlock.com/iam/latest/index/1579527945303.html
    schema:
      ## Define the applied operation
      ## - valid values: none, init, upgrade
      ## - init: create database if it does not yet exist
      ## - upgrade: apply schema upgrade scripts from https://docs.airlock.com when upgrading Airlock IAM
      ## - schema initialisation will use root user credentials to connect, see below
      operation: "none"

    ## Adminapp administrator
    ## - only relevant for operation 'init'
    administrator:
      ## Automatically create the administrator account for adminapp
      create: false

      ## For default passwords, administrator should be forced to change password at first login
      enforceChange: true

      ## Credentials
      ## - specify username & password for admin account
      ## - only relevant for database.initialisation.schema.operation=init and database.initialisation.schema.createAdministrator=true
      ## - preferably, use pre-existing secret
      ## - if secretName is defined, it is expected to contain the specified key
      ## - properties are the same as documented for database.external.credentials.user & password
      credentials:
        name:
          value: "admin"
          existingSecret: ""
          key: "admin_user"

        ## Hash of administrator password
        ## - depends on Airlock IAM application configuration (which password hash?)
        ## - cannot be calculated by Helm chart
        ## - define the correct hash value, e.g. 'MedusaPwdHistoryAAAARjE2Mzg0fF1jjOhya0ZuJ5OrHXgSXznOBBLl6eJ70PTdFYerSYPwgrlK1uq6UCzc5cvN8t1xtgc+YBQO8UgWBYhzDgpkQGM='
        pwd_hash:
          value: ""
          existingSecret: ""
          key: "admin_password"
      

## Image Options
images:
  ## Container image for Airlock IAM
  iam:
    ## Repository to retrieve the Airlock IAM image from.
    repository: "quay.io/airlock/iam"
  
    ## Tag that uniquely identifies the image.
    tag: "8.4"
  
    ## When to pull the image.
    pullPolicy: "IfNotPresent"
  
    ## Name of secret for protected images
    ## - required to pull Airlock IAM from the Airlock-maintained repository at quay.io
    ## - if you don't want to maintain pull secrets, you must provide your own, internal-access-only repository
    pullSecret: ""

  ## Container image for MariaDB initialisation
  mariadb:
    repository: "mariadb"
    tag: "12-ubi"
    pullPolicy: "IfNotPresent"
    pullSecret: ""

  ## Container image for MariaDB initialisation
  postgresql:
    repository: "postgres"
    tag: "17"
    pullPolicy: "IfNotPresent"
    pullSecret: ""

## Environment variables for all deployments
## - can be used to define settings for the instance.properties file by using the parameter name in all caps,
##   with punctuation such as "-" and "." replaced with "_". E.g. IAM_LOGINAPP_REST_UI_CUSTOMIZATIONS=instances/auth/designs/ui.zip
## - defined as a map, e.g. "varname: value"
## - these settings are overwritten by environment variable settings for iam.instanceProperties.env, iam.combined.env, and iam.apps.<app>.dedicatedDeployment.env
env: {}


## Sub-chart configurations

## Definition of MariaDB settings have to be at top-level, due to Helm limitations
##
mariadb:
  ## Source for deployment
  ## - valid values: chart, operator
  ## - chart: use the chart dependency - see https://github.com/bitnami/charts/tree/main/bitnami/mariadb
  ## - operator: prepare manifests for MariaDB Operator - see https://github.com/mariadb-operator/mariadb-operator/
  source: "chart"

  auth:
    ## Database name
    database: "airlock-iam"

    ## Username to connect to database
    username: "airlock-iam"

    ## Use existing secret for credentials
    ## - you must create this secret before installing the Helm chart
    ## - it must contain the keys mariadb-password, mariadb-root-password, and mariadb-replication-password
    ## - pay special consideration to have different secret names for different instantiations of this Helm chart
    ##   (different runs of helm install)
    ## - if you set database.deploymentType=mariadb and database.mariadb.source=chart, you almost always will have to also
    ##   specify this property in your "custom.yaml"
    existingSecret: "airlock-iam-db"

  architecture: "standalone"

  ## Enable persistence using Persistent Volume Claims
  primary:
    persistence:
      enabled: true
      existingClaim: "iam-db-storage"
      storageClass: ""
      accessMode: "ReadWriteOnce"
      size: "8Gi"

## Definition of PostgreSQL settings have to be at top-level, due to Helm limitations
##
postgresql:
  global:
    ## Overwrites database.mariadb.primary.persistence.storageClass
    defaultStorageClass: ""

  ## Source for deployment
  ## - valid values: chart, operator
  ## - chart: use the chart dependency - see https://github.com/bitnami/charts/tree/main/bitnami/postgresql
  ## - operator: prepare manifests for CloudNativePG - see https://github.com/cloudnative-pg/cloudnative-pg
  source: "chart"

  global:
    postgresql:
      # global.postgresql.auth overrides postgresql.auth
      auth:
        ## Database name
        database: "airlock-iam"

        ## Username to connect to database
        username: "airlock-iam"

        ## Use secret created by this Helm chart
        ## - you must create this secret before installing the Helm chart
        ## - it must contain the keys as secified below (database.postgresql.global.postgresql.auth.secretKeys)
        ## - pay special consideration to have different secret names for different instantiations of this Helm chart
        ##   (different runs of helm install)
        ## - if you set database.deploymentType=mariadb and database.mariadb.source=chart, you almost always will have to also
        ##   specify this property in your "custom.yaml"
        existingSecret: "airlock-iam-db"

        ## Names of keys in existing secret to use for PostgreSQL credentials
        secretKeys:
          adminPasswordKey: "postgresql-root-password"
          userPasswordKey: "postgresql-password"
          replicationPasswordKey: "postgresql-replication-password"

  ## Enable persistence using Persistent Volume Claims
  primary:
    persistence:
      enabled: false
      existingClaim: ""
      storageClass: ""

## Annotations that are added to the Airlock IAM Pod.
annotations: { }

## Deployment settings
deployment:
  ## Maximum number of old ReplicaSets kept in history of Deployment
  revisionHistoryLimit: 3

## Restart policy for the Airlock IAM deployment.
restartPolicy: "Always"

## Where the Helm chart originates
chartSource: "https://github.com/airlock-presales/airlock-iam-helm-chart"

global:
  timezone: "Europe/Zurich"

