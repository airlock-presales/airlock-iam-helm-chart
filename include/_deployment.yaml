{{- $fullName := ternary $.IAM.fullName (print $.IAM.fullName "-" $.IAM.suffix) (eq $.Values.iam.appDeploymentStrategy "single") -}}
{{- $databaseDeployment := include "airlock-iam.deploymentType" $ -}}
{{- $databaseType := include "airlock-iam.databaseType" $ -}}
{{- $instanceProp := deepCopy $.Values.iam.instanceProperties.default -}}
{{- $reference := $.IAM.instanceRef | default "default" -}}
{{- if hasKey $.Values.iam.instanceProperties $reference -}}
{{-   $instanceProp = mergeOverwrite $instanceProp (get $.Values.iam.instanceProperties $reference) -}}
{{- end -}}
{{- $persistenceProp := deepCopy $.Values.persistence.default -}}
{{- $reference = $.IAM.persistenceRef | default "default" -}}
{{- if hasKey $.Values.persistence $reference -}}
{{-   $persistenceProp = mergeOverwrite $persistenceProp (get $.Values.persistence $reference) -}}
{{- end -}}
{{- $healthChecksProp := deepCopy $.Values.healthChecks.default -}}
{{- $reference = $.IAM.healthChecksRef | default "default" -}}
{{- if hasKey $.Values.healthChecks $reference -}}
{{-   $healthChecksProp = mergeOverwrite $healthChecksProp (get $.Values.healthChecks $reference) -}}
{{- end -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "airlock-iam.labels" $ | nindent 4 }}
    {{- if $.IAM.suffix | default "" }}
    app.kubernetes.io/component: {{ $.IAM.module }}
    {{- end }}
  annotations:
    {{- include "airlock-iam.annotations" $ | nindent 4 }}
spec:
  {{- if eq $.Values.iam.appDeploymentStrategy "single" }}
  replicas: 1
  {{- else }}
  replicas: {{ $.IAM.app_values.replicas }}
  {{- end }}
  revisionHistoryLimit: {{ $.Values.deployment.revisionHistoryLimit }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "airlock-iam.selectorLabels" $ | nindent 6 }}
      {{- if $.IAM.suffix | default "" }}
      app.kubernetes.io/component: {{ $.IAM.module }}
      {{- end }}
  template:
    metadata:
      labels:
        {{- include "airlock-iam.labels" $ | nindent 8 }}
        {{- if $.IAM.suffix | default "" }}
        app.kubernetes.io/component: {{ $.IAM.module }}
        {{- end }}
      annotations:
        {{- include "airlock-iam.annotations" $ | nindent 8 }}
    spec:
      serviceAccountName: {{ $.IAM.fullName }}
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      {{- $pullSecrets := include "airlock-iam.listPullSecrets" $ }}
      {{- if ne $pullSecrets "" }}
      imagePullSecrets:
        {{- range (regexSplit "," $pullSecrets -1) }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      initContainers:
        {{- if $.Values.iam.instanceCreate }}
        - name: "init-instance"
          image: "{{ $.Values.images.iam.repository }}:{{ $.Values.images.iam.tag }}"
          imagePullPolicy: {{ quote $.Values.images.iam.pullPolicy }}
          command: ["/bin/bash", "/var/tmp/scripts/init_instance"]
          env:
            - name: INSTANCE_DIR
              value: "/home/airlock/iam/instances"
            - name: INIT_INSTANCE
              value: {{ $.Values.iam.instanceName }}
            - name: INIT_INSTANCE_CREATE
              value: {{ ternary "true" "false" (contains "adminapp" $.IAM.module) | quote }}
            - name: INIT_CONFIG_FORMAT
              value: {{ ternary "xml" "yaml" (eq (lower $.Values.iam.configFormat) "xml") }}
          volumeMounts:
            {{- if $persistenceProp.config.enable }}
            - mountPath: /home/airlock/iam/instances
              name: config
            {{- end }}
            - mountPath: /home/airlock/iam/license.txt
              name: license
              subPath: license.txt
            - mountPath: /var/tmp/scripts
              name: init
        {{- end }}
        {{- if and (ne $databaseDeployment "none") (ne $databaseDeployment "") }}
        - name: "init-db"
          image: "{{ $.Values.images.initdb.repository }}:{{ $.Values.images.initdb.tag }}"
          imagePullPolicy: {{ quote $.Values.images.initdb.pullPolicy }}
          command: ["/bin/bash", "/var/tmp/scripts/init_db"]
          env:
            - name: INSTANCE_DIR
              value: "/home/airlock/iam/instances"
            - name: INIT_TYPE
              value: {{ $databaseType | quote }}
            - name: INIT_INSTANCE
              value: {{ $.Values.iam.instanceName }}
            - name: INIT_INSTANCE_VERSION
              value: {{ $.Values.images.iam.tag | quote }}
            - name: INIT_DL
              value: {{ ternary "true" "false" (and $.Values.database.initialisation.connector.download $persistenceProp.config.enable) | quote }}
            - name: INIT_DL_VERSION
              value: {{ (ternary $.Values.database.initialisation.connector.mariadb.version $.Values.database.initialisation.connector.postgresql.version (eq $databaseType "mariadb")) | quote }}
            - name: INIT_DB_SCHEMA
              value: {{ ternary $.Values.database.initialisation.schema.operation "none" (contains "adminapp" $.IAM.module) }}
            - name: INIT_DB_HOST
              {{- if eq $databaseDeployment "external" }}
              value: {{ $.Values.database.external.host }}
              {{- else if eq $databaseDeployment "mariadb" }}
              value: {{ print $.IAM.fullName "-mariadb" }}
              {{- else if eq $databaseDeployment "postgresql" }}
              value: {{ print $.IAM.fullName "-postgresql-rw" }}
              {{- end }}
            - name: INIT_DB_DATABASE
              {{- if eq $databaseDeployment "external" }}
              value: {{ $.Values.database.external.database }}
              {{- else if eq $databaseDeployment "mariadb" }}
              value: {{ $fullName }}
              {{- else if eq $databaseDeployment "postgresql" }}
              value: "iam"
              {{- end }}
            - name: INIT_DB_USERNAME
              {{- if eq $databaseDeployment "external" }}
              {{-   if ne $.Values.database.credentials.rootUser.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.rootUser.existingSecret }}
                  key: {{ $.Values.database.credentials.rootUser.key }}
              {{-   else if ne $.Values.database.credentials.rootUser.value "" }}
              value: {{ $.Values.database.credentials.rootUser.value }}
              {{-   else if ne $.Values.database.credentials.user.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.user.existingSecret }}
                  key: {{ $.Values.database.credentials.user.key }}
              {{-   else }}
              value: {{ $.Values.database.credentials.user.value }}
              {{-   end }}
              {{- else if eq $databaseDeployment "mariadb" }}
              value: {{ $.Values.database.credentials.user.value }}
              {{- else if eq $databaseDeployment "postgresql" }}
              {{-   if ne $.Values.database.credentials.user.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.user.existingSecret }}
                  key: "username"
              {{-   else }}
              value: {{ $.Values.database.credentials.user.value }}
              {{-   end }}
              {{- end }}
            - name: INIT_DB_PASSWORD
              {{- if eq $databaseDeployment "external" }}
              {{-   if ne $.Values.database.credentials.rootPassword.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.rootPassword.existingSecret }}
                  key: {{ $.Values.database.credentials.rootPassword.key }}
              {{-   else if ne $.Values.database.credentials.rootPassword.value "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.IAM.fullName }}
                  key: {{ $.Values.database.credentials.rootPassword.key }}
              {{-   else if ne $.Values.database.credentials.password.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.password.existingSecret }}
                  key: {{ $.Values.database.credentials.password.key }}
              {{-   else }}
              value: {{ $.Values.database.credentials.password.value }}
              {{-   end }}
              {{- else if eq $databaseDeployment "mariadb" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}
                  key: {{ $.Values.database.credentials.password.key }}
              {{- else if eq $databaseDeployment "postgresql" }}
              valueFrom:
                secretKeyRef:
                  {{- if ne $.Values.database.credentials.password.existingSecret "" }}
                  name: {{ $.Values.database.credentials.password.existingSecret }}
                  {{- else }}
                  name: {{ $fullName }}
                  {{- end }}
                  key: "password"
              {{- end }}
            - name: INIT_DB_VERSION
              value: {{ $.Values.images.iam.tag | quote }}
            - name: INIT_ADMIN_CREATE
              value: {{ ternary $.Values.database.initialisation.administrator.create "false" (contains "adminapp" $.IAM.module) | quote }}
            - name: INIT_ADMIN_CHANGE
              value: {{ $.Values.database.initialisation.administrator.enforceChange | quote }}
            - name: INIT_ADMIN_USERNAME
              {{- if ne $.Values.database.initialisation.administrator.credentials.name.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.initialisation.administrator.credentials.name.existingSecret }}
                  key: {{ $.Values.database.initialisation.administrator.credentials.name.key }}
              {{- else }}
              value: {{ $.Values.database.initialisation.administrator.credentials.name.value }}
              {{- end }}
            - name: INIT_ADMIN_PWD_HASH
              {{- if ne $.Values.database.initialisation.administrator.credentials.pwd_hash.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.initialisation.administrator.credentials.pwd_hash.existingSecret }}
                  key: {{ $.Values.database.initialisation.administrator.credentials.pwd_hash.key }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.IAM.fullName }}
                  key: {{ $.Values.database.initialisation.administrator.credentials.pwd_hash.key }}
              {{- end }}
          volumeMounts:
            {{- if $persistenceProp.config.enable }}
            - mountPath: /home/airlock/iam/instances
              name: config
            {{- end }}
            - mountPath: /var/tmp/scripts
              name: init
        {{- end }}
      containers:
        - name: "iam"
          image: "{{ $.Values.images.iam.repository }}:{{ $.Values.images.iam.tag }}"
          imagePullPolicy: {{ quote $.Values.images.iam.pullPolicy }}
          args: ["run", "-i", {{ quote $.Values.iam.instanceName }}]
          env:
            {{- if $.Values.iam.environmentId }}
            - name: IAM_ENVIRONMENT_ID
              value: {{ $.Values.iam.environmentId }}
            {{- end }}
            - name: IAM_CONFIG_FORMAT
              value: {{ ternary "xml" "yaml" (eq (lower $.Values.iam.configFormat) "xml") }}
            {{- if $.Values.iam.apps.adminapp.path }}
            - name: IAM_ADMINAPP_URL_PATH
              value: {{ $.Values.iam.apps.adminapp.path }}
            {{- end }}
            {{- if $.Values.iam.apps.loginapp.path }}
            - name: IAM_LOGINAPP_URL_PATH
              value: {{ $.Values.iam.apps.loginapp.path }}
            {{- end }}
            {{- if $.Values.iam.apps.transactionApproval.path }}
            - name: IAM_TRANSACTION_APPROVAL_URL_PATH
              value: {{ $.Values.iam.apps.transactionApproval.path }}
            {{- end }}
            {{- if $.Values.iam.apps.serviceContainer.path }}
            - name: IAM_SERVICE_CONTAINER_URL_PATH
              value: {{ $.Values.iam.apps.serviceContainer.path }}
            {{- end }}
            {{- if $.Values.iam.apps.apiPolicyService.path }}
            - name: IAM_API_POLICY_SERVICE_URL_PATH
              value: {{ $.Values.iam.apps.apiPolicyService.path }}
            {{- end }}
            - name: IAM_MODULES
              value: {{ $.IAM.module }}
            - name: IAM_WEB_SERVER_CONNECTORS
              value: "http,https"
            - name: IAM_WEB_SERVER_HTTP_PORT
              value: "8080"
            - name: IAM_WEB_SERVER_HTTPS_PORT
              value: "8443"
            {{- if eq $instanceProp.logging.level "" }}
            - name: IAM_LOG_LEVEL
              value: INFO
            {{- else if ne $instanceProp.logging.level "" }}
            - name: IAM_LOG_LEVEL
              value: {{ $instanceProp.logging.level }}
            {{- end }}
            {{- if and $instanceProp.logging.local.enable (or (eq $.Values.iam.appDeploymentStrategy "single") (eq (int $.IAM.app_values.replicas) 1)) }}
            #! Local logging is disabled with multiple replicas
            {{-   if $instanceProp.logging.local.structured }}
            - name: IAM_LOG_STRUCTURED_FILE_ENABLED
              value: "true"
            - name: IAM_LOG_MAIN_ENABLED
              value: "false"
            {{-   else }}
            - name: IAM_LOG_STRUCTURED_FILE_ENABLED
              value: "false"
            - name: IAM_LOG_MAIN_ENABLED
              value: "true"
            {{-   end }}
            {{- end }}
            {{- if $instanceProp.logging.elasticsearchUrl }}
            - name: IAM_LOG_ELASTICSEARCH_URL
              value: {{ $instanceProp.logging.elasticsearchUrl }}
            {{- end }}
            {{- if $instanceProp.logging.webserver }}
            - name: IAM_WEB_SERVER_ACCESS_LOG_FILE_ENABLED
              value: "true"
            {{- end }}
            {{- if and (ne $databaseDeployment "none") (ne $databaseDeployment "") }}
            - name: IAM_CONFIG_EDITOR_SHOW_VARIABLES
              value: "true"
            - name: IAM_CFG_DB_DRIVER_CLASS
            {{-   if (eq $databaseType "mariadb") }}
              value: "org.mariadb.jdbc.Driver"
            {{-   else if (eq $databaseType "postgresql") }}
              value: "org.postgresql.Driver"
            {{-   else if (eq $databaseType "mysql") }}
              value: "com.mysql.cj.jdbc.Driver"
            {{-   else if (eq $databaseType "oracle") }}
              value: "oracle.jdbc.OracleDriver"
            {{-   else if (eq $databaseType "sqlserver") }}
              value: "com.microsoft.sqlserver.jdbc.SQLServerDriver"
            {{-   end }}
            - name: IAM_CFG_DB_URL
            {{-   if eq $databaseDeployment "external" }}
              value: {{ print "jdbc:" $.Values.database.external.type "://" $.Values.database.external.host "/" $.Values.database.external.database }}
            {{-   else if eq $databaseDeployment "mariadb" }}
              value: {{ print "jdbc:mariadb://" $.IAM.fullName "-mariadb/" $fullName }}
            {{-   else if eq $databaseDeployment "postgresql" }}
              value: {{ print "jdbc:postgres://" $.IAM.fullName "-postgresql-rw/" $.Values.postgresql.global.postgresql.auth.database }}
            {{-   end }}
            - name: IAM_CFG_DB_USERNAME
            {{-   if eq $databaseDeployment "external" }}
              {{- if ne $.Values.database.credentials.user.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.user.existingSecret }}
                  key: {{ $.Values.database.credentials.user.key }}
              {{- else }}
              value: {{ $.Values.database.credentials.user.value }}
              {{- end }}
            {{-   else if eq $databaseDeployment "mariadb" }}
              value: {{ $.Values.database.credentials.user.value }}
            {{-   else if eq $databaseDeployment "postgresql" }}
              {{-   if ne $.Values.database.credentials.user.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.user.existingSecret }}
                  key: "username"
              {{-   else }}
              value: {{ $.Values.database.credentials.user.value }}
              {{-   end }}
            {{-   end }}
            - name: IAM_CFG_DB_PASSWORD
            {{-   if eq $databaseDeployment "external" }}
              {{- if ne $.Values.database.credentials.password.existingSecret "" }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.credentials.password.existingSecret }}
                  key: {{ $.Values.database.credentials.password.key }}
              {{- else }}
              value: {{ $.Values.database.credentials.password.value }}
              {{- end }}
            {{-   else if eq $databaseDeployment "mariadb" }}
              valueFrom:
                secretKeyRef:
                  {{- if ne $.Values.database.credentials.password.existingSecret "" }}
                  name: {{ $.Values.database.credentials.password.existingSecret }}
                  {{- else }}
                  name: {{ $fullName }}
                  {{- end }}
                  key: {{ $.Values.database.credentials.password.key }}
            {{-   else if eq $databaseDeployment "postgresql" }}
              valueFrom:
                secretKeyRef:
                  {{- if ne $.Values.database.credentials.password.existingSecret "" }}
                  name: {{ $.Values.database.credentials.password.existingSecret }}
                  {{- else }}
                  name: {{ $fullName }}
                  {{- end }}
                  key: "password"
            {{-   end }}
            {{- end }}
            {{- if $.Values.redis.enable }}
              {{- $addrs := print "{\"sentinelServersConfig\":" "{" "\"connectTimeout\":10000,\"masterName\":\"mymaster\",\"sentinelAddresses\":[" -}}
              {{- range untilStep 0 (int $.Values.redis.replica.replicaCount) 1 -}}
              {{-   if gt . 0 -}}
              {{-     $addrs = print $addrs "," -}}
              {{-   end -}}
              {{-   $addrs = print $addrs "\"redis://" $.IAM.fullName "-redis-node-" . "." $.IAM.fullName "-redis-headless:26379\"" -}}
              {{- end -}}
              {{- $addrs = print $addrs "]}}" }}
            - name: IAM_CFG_REDIS_EXPERT_CONFIG
              value: {{ $addrs | fromJson | toYaml | quote }}
            {{- end }}
            {{- if $instanceProp.metrics }}
            - name: IAM_METRICS_PORT
              value: {{ quote $instanceProp.metrics }}
            {{- end }}
            - name: IAM_HEALTH_PORT
              value: "8081"
            - name: IAM_HEALTH_ADDRESS
              value: ".*"
            {{- range $name, $value := mergeOverwrite $.Values.env $instanceProp.env $.IAM.app_values.env }}
            - name: {{ quote $name }}
              value: {{ quote $value }}
            {{- end }}
            - name: TZ
              value: {{ $.Values.global.timezone }}
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8081
              name: health
          {{- if $healthChecksProp.liveness.enable }}
          livenessProbe:
            periodSeconds: {{ $healthChecksProp.liveness.period }}
            timeoutSeconds: {{ $healthChecksProp.liveness.timeout }}
            failureThreshold: {{ $healthChecksProp.liveness.failures }}
            initialDelaySeconds: {{ $healthChecksProp.liveness.initialDelay }}
            httpGet:
              path: /health/live
              port: health
          {{- end }}
          {{- if $healthChecksProp.readiness.enable }}
          readinessProbe:
            periodSeconds: {{ $healthChecksProp.readiness.period }}
            timeoutSeconds: {{ $healthChecksProp.readiness.timeout }}
            failureThreshold: {{ $healthChecksProp.readiness.failures }}
            initialDelaySeconds: {{ $healthChecksProp.readiness.initialDelay }}
            httpGet:
              path: /health/ready
              port: health
          {{- end }}
          {{- if $healthChecksProp.startup.enable }}
          startupProbe:
            periodSeconds: {{ $healthChecksProp.startup.period }}
            timeoutSeconds: {{ $healthChecksProp.startup.timeout }}
            failureThreshold: {{ $healthChecksProp.startup.failures }}
            initialDelaySeconds: {{ $healthChecksProp.startup.initialDelay }}
            httpGet:
              path: /health/ready
              port: health
          {{- end }}
          resources:
            {{- if or (ne $.IAM.app_values.resources.requests.cpu "") (ne $.IAM.app_values.resources.requests.ram "") }}
            requests:
              {{- if or (ne $.IAM.app_values.resources.requests.cpu "") }}
              cpu: {{ $.IAM.app_values.resources.requests.cpu }}
              {{- end }}
              {{- if or (ne $.IAM.app_values.resources.requests.ram "") }}
              memory: {{ $.IAM.app_values.resources.requests.ram }}
              {{- end }}
            {{- end }}
            {{- if or (ne $.IAM.app_values.resources.limits.cpu "") (ne $.IAM.app_values.resources.limits.ram "") }}
            limits:
              {{- if or (ne $.IAM.app_values.resources.limits.cpu "") }}
              cpu: {{ $.IAM.app_values.resources.limits.cpu }}
              {{- end }}
              {{- if or (ne $.IAM.app_values.resources.limits.ram "") }}
              memory: {{ $.IAM.app_values.resources.limits.ram }}
              {{- end }}
            {{- end }}
    {{- if $.Values.resourceOptions }}
          resources:
    {{ toYaml $.Values.resourceOptions | indent 8 }}
    {{- end }}
          volumeMounts:
            {{- if $persistenceProp.config.enable }}
            - mountPath: /home/airlock/iam/instances
              name: config
            {{- end }}
            {{- if or $persistenceProp.logs.enable (gt (int $.IAM.app_values.replicas) 1) }}
            #! With multiple replicas, ensure log buffers do not collide
            - mountPath: {{ print "/home/airlock/iam/instances/" $.Values.iam.instanceName "/logs" }}
              name: logs
            {{- end }}
            - mountPath: /home/airlock/iam/license.txt
              name: license
              subPath: license.txt
            - mountPath: /home/airlock/work
              name: work
      restartPolicy: {{ quote $.Values.restartPolicy }}
      volumes:
        {{- if $persistenceProp.config.enable }}
        - name: config
          {{- if eq $persistenceProp.config.type "request" }}
          persistentVolumeClaim:
            claimName: {{ print $.IAM.fullName "-" ($persistenceProp.config.claim | default "config") }}
          {{- else if eq $persistenceProp.config.type "existing" }}
          persistentVolumeClaim:
            claimName: {{ $persistenceProp.config.claim }}
          {{- else if eq $persistenceProp.config.type "remote" }}
          {{ $persistenceProp.config.remote.type }}:
            server: {{ $persistenceProp.config.remote.server }}
            path: {{ $persistenceProp.config.remote.path }}
          {{- else if eq $persistenceProp.config.type "hostpath" }}
          hostPath:
            path: {{ $persistenceProp.config.hostPath }}
            type: Directory
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        {{- if gt (int $.IAM.app_values.replicas) 1 }}
        #! With multiple replicas, ensure log buffers do not collide
        - name: logs
          emptyDir: {}
        {{- else if $persistenceProp.logs.enable }}
        - name: logs
          {{- if eq $persistenceProp.logs.type "request" }}
          persistentVolumeClaim:
            claimName: {{ print $.IAM.fullName "-" ($persistenceProp.logs.claim | default "logs") }}
          {{- else if eq $persistenceProp.logs.type "existing" }}
          persistentVolumeClaim:
            claimName: {{ $persistenceProp.logs.claim }}
          {{- else if eq $persistenceProp.logs.type "remote" }}
          {{ $persistenceProp.logs.remote.type }}:
            server: {{ $persistenceProp.logs.remote.server }}
            path: {{ $persistenceProp.logs.remote.path }}
          {{- else if eq $persistenceProp.logs.type "hostpath" }}
          hostPath:
            path: {{ $persistenceProp.logs.hostPath }}
            type: Directory
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        - name: license
          {{- if has (lower $.Values.iam.license.type) (list "cm" "configmap") }}
          configMap:
            name: {{ $.Values.iam.license.name }}
          {{- else if has (lower $.Values.iam.license.type) (list "secret") }}
          secret:
            secretName: {{ $.Values.iam.license.name }}
          {{- else }}
          {{-   fail "Invalid value for iam.license.type" }}
          {{- end }}
        {{- if and (ne $databaseDeployment "none") (ne $databaseDeployment "") }}
        - name: init
          configMap:
            name: {{ $.IAM.fullName }}-init
        {{- end }}
        - name: work
          emptyDir: {}
